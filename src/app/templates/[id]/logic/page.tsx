'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { doc, onSnapshot } from 'firebase/firestore';
import { db } from '@/lib/firebase/config';

// Enhanced Components
import EnhancedLogicCanvas from '@/components/logic/LogicCanvas';
import EnhancedLogicSidebar from '@/components/logic/EnhancedLogicSidebar';
import EnhancedCasperLogicWidget from '@/components/logic/CasperLogicWidget';

// Data Loaders
import { getEnhancedCasperVariableContext, type EnhancedCasperVariable } from '@/lib/firebase/loaders/getCasperVariableContext';
import { getTemplateData } from '@/lib/firebase/loaders/getTemplateData';

// Healthcare Compliance
import { 
  ComplianceRulesEngine, 
  defaultComplianceEngine, 
  type ComplianceViolation 
} from '@/lib/healthcare/complianceRules';

// Icons
import { 
  AlertTriangle, 
  CheckCircle, 
  Loader2, 
  RefreshCw,
  Shield,
  Info,
  X,
  Eye,
  Settings,
  Save
} from 'lucide-react';

interface TemplateComponent {
  id: string;
  type: 'variable' | 'block' | 'component';
  name: string;
  usageCount: number;
  inTemplate: boolean;
}

interface TemplateData {
  id: string;
  name: string;
  content: string;
  logic?: {
    nodes: any[];
    edges: any[];
    autoGenerated?: boolean;
    lastUpdated?: string;
  };
  variables?: any[];
}

export default function EnhancedLogicPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  
  // Core State
  const [templateData, setTemplateData] = useState<TemplateData | null>(null);
  const [templateContent, setTemplateContent] = useState('');
  const [templateComponents, setTemplateComponents] = useState<TemplateComponent[]>([]);
  const [variables, setVariables] = useState<EnhancedCasperVariable[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Compliance State
  const [complianceViolations, setComplianceViolations] = useState<ComplianceViolation[]>([]);
  const [complianceLoading, setComplianceLoading] = useState(false);
  const [showCompliancePanel, setShowCompliancePanel] = useState(false);

  // UI State
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showNotifications, setShowNotifications] = useState(true);

  // Load template data and set up real-time listener
  useEffect(() => {
    if (!params.id) return;

    const templateRef = doc(db, 'templates', params.id);
    
    const unsubscribe = onSnapshot(
      templateRef,
      (doc) => {
        if (doc.exists()) {
          const data = doc.data() as TemplateData;
          setTemplateData({ id: doc.id, ...data });
          setTemplateContent(data.content || '');
          setError(null);
          
          // Update last saved time if logic was updated
          if (data.logic?.lastUpdated) {
            setLastSaved(new Date(data.logic.lastUpdated));
            setHasUnsavedChanges(false);
          }
        } else {
          setError('Template not found');
        }
        setIsLoading(false);
      },
      (error) => {
        console.error('Error loading template:', error);
        setError('Failed to load template');
        setIsLoading(false);
      }
    );

    return () => unsubscribe();
  }, [params.id]);

  // Load enhanced variables context
  useEffect(() => {
    const loadVariables = async () => {
      try {
        const enhancedVariables = await getEnhancedCasperVariableContext();
        setVariables(enhancedVariables);
      } catch (error) {
        console.error('Error loading variables:', error);
      }
    };

    loadVariables();
  }, []);

  // Run compliance check when template content changes
  useEffect(() => {
    if (templateContent && templateComponents.length > 0) {
      runComplianceCheck();
    }
  }, [templateContent, templateComponents]);

  // Run compliance check
  const runComplianceCheck = useCallback(async () => {
    if (!templateData) return;

    setComplianceLoading(true);
    
    try {
      // Extract template data for compliance evaluation
      const templateForCompliance = {
        content: templateContent,
        components: templateComponents,
        variables: variables.filter(v => 
          templateComponents.some(c => c.name === v.key && c.inTemplate)
        ),
        // Mock some common template data patterns
        claim: { status: 'DENIED' }, // This would come from actual template variables
        request: { dispositionCode: 'DENIED' },
        member: { preferredLanguageCode: 'en' }
      };

      const violations = defaultComplianceEngine.evaluateCompliance(templateForCompliance);
      setComplianceViolations(violations);
      
      // Show compliance panel if there are violations
      if (violations.length > 0 && !showCompliancePanel) {
        setShowCompliancePanel(true);
      }
    } catch (error) {
      console.error('Error running compliance check:', error);
    } finally {
      setComplianceLoading(false);
    }
  }, [templateData, templateContent, templateComponents, variables, showCompliancePanel]);

  // Handle template components change
  const handleTemplateComponentsChange = useCallback((components: TemplateComponent[]) => {
    setTemplateComponents(components);
    setHasUnsavedChanges(true);
  }, []);

  // Handle logic insertion from Casper AI
  const handleLogicInserted = useCallback((logic: any) => {
    console.log('Logic inserted from Casper AI:', logic);
    setHasUnsavedChanges(true);
    
    // Show success notification
    setShowNotifications(true);
  }, []);

  // Auto-fix compliance violations
  const handleAutoFix = useCallback(async () => {
    if (!templateData) return;

    try {
      setComplianceLoading(true);
      const autoFixableViolations = complianceViolations.filter(v => v.autoFixAvailable);
      
      if (autoFixableViolations.length > 0) {
        const appliedFixes = await defaultComplianceEngine.autoFixViolations(
          autoFixableViolations, 
          templateData.id
        );
        
        console.log('Applied auto-fixes:', appliedFixes);
        
        // Re-run compliance check
        await runComplianceCheck();
        
        // Show success message
        alert(`Applied ${appliedFixes.length} auto-fixes`);
      }
    } catch (error) {
      console.error('Error applying auto-fixes:', error);
      alert('Failed to apply auto-fixes');
    } finally {
      setComplianceLoading(false);
    }
  }, [templateData, complianceViolations, runComplianceCheck]);

  // Navigation handlers
  const handlePreviewToggle = useCallback(() => {
    router.push(`/templates/${params.id}/preview`);
  }, [router, params.id]);

  const handleBackToEditor = useCallback(() => {
    router.push(`/template-builder?id=${params.id}`);
  }, [router, params.id]);

  // Loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center">
          <Loader2 className="w-12 h-12 animate-spin text-blue-600 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Loading Logic Builder</h2>
          <p className="text-gray-600">Preparing your template logic interface...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex items-center justify-center h-screen bg-gray-50">
        <div className="text-center max-w-md">
          <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error Loading Template</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => router.push('/templates')}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Back to Templates
          </button>
        </div>
      </div>
    );
  }

  const blockingViolations = complianceViolations.filter(v => v.severity === 'error');
  const warningViolations = complianceViolations.filter(v => v.severity === 'warning');

  return (
    <div className="h-screen flex flex-col bg-gray-100">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={handleBackToEditor}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              title="Back to Template Editor"
            >
              <X className="w-5 h-5 text-gray-600" />
            </button>
            <div>
              <h1 className="text-xl font-semibold text-gray-900">
                Logic Builder
              </h1>
              <p className="text-sm text-gray-600">
                {templateData?.name || 'Unnamed Template'}
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {/* Compliance Status */}
            <div className="flex items-center space-x-2">
              {complianceLoading ? (
                <Loader2 className="w-4 h-4 animate-spin text-gray-400" />
              ) : (
                <>
                  {blockingViolations.length > 0 ? (
                    <div className="flex items-center space-x-1 text-red-600">
                      <AlertTriangle className="w-4 h-4" />
                      <span className="text-sm font-medium">{blockingViolations.length} Critical</span>
                    </div>
                  ) : warningViolations.length > 0 ? (
                    <div className="flex items-center space-x-1 text-yellow-600">
                      <AlertTriangle className="w-4 h-4" />
                      <span className="text-sm font-medium">{warningViolations.length} Warnings</span>
                    </div>
                  ) : (
                    <div className="flex items-center space-x-1 text-green-600">
                      <CheckCircle className="w-4 h-4" />
                      <span className="text-sm font-medium">Compliant</span>
                    </div>
                  )}
                </>
              )}
              
              <button
                onClick={() => setShowCompliancePanel(!showCompliancePanel)}
                className={`p-2 rounded-lg transition-colors ${
                  showCompliancePanel ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100 text-gray-600'
                }`}
                title="Toggle Compliance Panel"
              >
                <Shield className="w-4 h-4" />
              </button>
            </div>

            {/* Actions */}
            <div className="flex items-center space-x-2 border-l border-gray-200 pl-4">
              <button
                onClick={runComplianceCheck}
                disabled={complianceLoading}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors disabled:opacity-50"
                title="Refresh Compliance Check"
              >
                <RefreshCw className={`w-4 h-4 text-gray-600 ${complianceLoading ? 'animate-spin' : ''}`} />
              </button>
              
              <button
                onClick={handlePreviewToggle}
                className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                <Eye className="w-4 h-4" />
                <span>Preview</span>
              </button>

              <button
                onClick={() => {/* TODO: Save logic */}}
                disabled={!hasUnsavedChanges}
                className="flex items-center space-x-2 px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Save className="w-4 h-4" />
                <span>Save Logic</span>
              </button>
            </div>
          </div>
        </div>

        {/* Status Indicators */}
        {(hasUnsavedChanges || lastSaved) && (
          <div className="mt-2 flex items-center space-x-4 text-xs text-gray-600">
            {hasUnsavedChanges && (
              <span className="text-amber-600">• Unsaved changes</span>
            )}
            {lastSaved && (
              <span>Last saved: {lastSaved.toLocaleTimeString()}</span>
            )}
            <span>Components: {templateComponents.length}</span>
            <span>Variables: {variables.length}</span>
          </div>
        )}
      </div>

      {/* Main Content */}
      <div className="flex-1 flex">
        {/* Enhanced Sidebar */}
        <div className="w-80 bg-white shadow-lg">
          <EnhancedLogicSidebar
            templateId={params.id}
            templateContent={templateContent}
            variables={variables}
            onTemplateComponentsChange={handleTemplateComponentsChange}
          />
        </div>

        {/* Enhanced Canvas */}
        <div className="flex-1 relative">
          <EnhancedLogicCanvas
            templateId={params.id}
            templateContent={templateContent}
            onPreviewToggle={handlePreviewToggle}
          />
        </div>

        {/* Compliance Panel */}
        {showCompliancePanel && (
          <div className="w-80 bg-white shadow-lg border-l border-gray-200">
            <div className="h-full flex flex-col">
              {/* Compliance Header */}
              <div className="p-4 border-b border-gray-200 bg-gray-50">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Shield className="w-5 h-5 text-blue-600" />
                    <h3 className="font-semibold text-gray-900">Compliance Check</h3>
                  </div>
                  <button
                    onClick={() => setShowCompliancePanel(false)}
                    className="p-1 hover:bg-gray-200 rounded"
                  >
                    <X className="w-4 h-4 text-gray-500" />
                  </button>
                </div>
                
                {complianceViolations.length > 0 && (
                  <div className="mt-2 flex items-center space-x-2">
                    <button
                      onClick={handleAutoFix}
                      disabled={complianceLoading || !complianceViolations.some(v => v.autoFixAvailable)}
                      className="px-3 py-1 text-xs font-medium text-blue-700 bg-blue-100 rounded hover:bg-blue-200 disabled:opacity-50"
                    >
                      Auto-Fix Available Issues
                    </button>
                  </div>
                )}
              </div>

              {/* Compliance Content */}
              <div className="flex-1 overflow-y-auto p-4">
                {complianceViolations.length === 0 ? (
                  <div className="text-center py-8">
                    <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-3" />
                    <h4 className="text-sm font-medium text-gray-900 mb-1">
                      Compliance Check Passed
                    </h4>
                    <p className="text-xs text-gray-600">
                      Your template meets all healthcare compliance requirements.
                    </p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {complianceViolations.map((violation, index) => (
                      <div
                        key={index}
                        className={`p-3 rounded-lg border ${
                          violation.severity === 'error'
                            ? 'border-red-200 bg-red-50'
                            : 'border-yellow-200 bg-yellow-50'
                        }`}
                      >
                        <div className="flex items-start space-x-2">
                          <AlertTriangle className={`w-4 h-4 mt-0.5 ${
                            violation.severity === 'error' ? 'text-red-500' : 'text-yellow-500'
                          }`} />
                          <div className="flex-1">
                            <h5 className={`text-sm font-medium ${
                              violation.severity === 'error' ? 'text-red-900' : 'text-yellow-900'
                            }`}>
                              {violation.ruleName}
                            </h5>
                            <p className={`text-xs mt-1 ${
                              violation.severity === 'error' ? 'text-red-700' : 'text-yellow-700'
                            }`}>
                              {violation.message}
                            </p>
                            {violation.suggestion && (
                              <p className={`text-xs mt-1 font-medium ${
                                violation.severity === 'error' ? 'text-red-800' : 'text-yellow-800'
                              }`}>
                                Suggestion: {violation.suggestion}
                              </p>
                            )}
                            {violation.autoFixAvailable && (
                              <div className="mt-2">
                                <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded">
                                  Auto-fix available
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Casper AI */}
        <EnhancedCasperLogicWidget
          variables={variables}
          templateComponents={templateComponents}
          templateId={params.id}
          onLogicInserted={handleLogicInserted}
        />
      </div>

      {/* Notifications */}
      {showNotifications && complianceViolations.length > 0 && (
        <div className="fixed bottom-4 right-4 max-w-sm">
          <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-4">
            <div className="flex items-start space-x-2">
              <Info className="w-5 h-5 text-blue-500 mt-0.5" />
              <div className="flex-1">
                <h4 className="text-sm font-medium text-gray-900">
                  Compliance Issues Detected
                </h4>
                <p className="text-xs text-gray-600 mt-1">
                  {blockingViolations.length} critical issues, {warningViolations.length} warnings
                </p>
              </div>
              <button
                onClick={() => setShowNotifications(false)}
                className="p-1 hover:bg-gray-100 rounded"
              >
                <X className="w-4 h-4 text-gray-400" />
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}